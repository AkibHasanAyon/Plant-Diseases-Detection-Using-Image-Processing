import streamlit as st
import tensorflow as tf
import numpy as np
import json
import os
from datetime import datetime

# TensorFlow Model Prediction
def model_prediction(test_image):
    model = tf.keras.models.load_model("trained_plant_disease_model.keras")
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(128, 128))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])
    predictions = model.predict(input_arr)
    return np.argmax(predictions)

# Load user data
def load_user_data():
    if os.path.exists('user_data.json'):
        with open('user_data.json', 'r') as f:
            return json.load(f)
    return {}

# Save user data
def save_user_data(user_data):
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f)

# Log user inputs
def log_image_input(mobile_number, image_path, prediction):
    if not os.path.exists('user_inputs.json'):
        with open('user_inputs.json', 'w') as f:
            json.dump([], f)
    with open('user_inputs.json', 'r') as f:
        inputs = json.load(f)
    input_data = {
        "mobile_number": mobile_number,
        "image_path": image_path,
        "prediction": prediction,
        "timestamp": str(datetime.now())
    }
    inputs.append(input_data)
    with open('user_inputs.json', 'w') as f:
        json.dump(inputs, f)

# Save uploaded image
def save_uploaded_file(uploaded_file):
    upload_dir = 'uploaded_images/'
    if not os.path.exists(upload_dir):
        os.makedirs(upload_dir)
    file_path = os.path.join(upload_dir, uploaded_file.name)
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    return file_path

# Admin credentials
ADMIN_CREDENTIALS = {"admin": "admin"}

# Sidebar
st.sidebar.title("Dashboard")
app_mode = st.sidebar.radio("Select Page", ["Home", "Disease Recognition", "Login", "Register", "Admin Dashboard", "About"])

if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
if 'is_admin' not in st.session_state:
    st.session_state.is_admin = False

# Logout buttons
if st.session_state.logged_in:
    if st.sidebar.button("Logout"):
        st.session_state.logged_in = False
        st.session_state.is_admin = False
        st.success("You have logged out successfully.")
        app_mode = "Home"

# Placeholder for forms
placeholder = st.empty()

# Load user data
user_data = load_user_data()

# Home page
if app_mode == "Home":
    st.header("PLANT DISEASE RECOGNITION SYSTEM")
    st.image("home_page.jpeg", use_container_width=True)
    st.markdown("""
    Welcome to the Plant Disease Recognition System! ЁЯМ┐ЁЯФН

    Upload an image of a plant to detect potential diseases using our ML model.

    Navigate to **Disease Recognition** to get started!
    """)

# Disease Recognition page
elif app_mode == "Disease Recognition":
    if not st.session_state.logged_in:
        st.warning("Please log in to access Disease Recognition.")
    else:
        st.header("Disease Recognition")
        test_image = st.file_uploader("Choose an Image:")
        if st.button("Predict") and test_image:
            image_path = save_uploaded_file(test_image)
            st.image(image_path, use_container_width=True)
            st.snow()
            result_index = model_prediction(image_path)
            class_name = [
                 {"рж░рзЛржЧ": "ржЖржкрзЗрж▓ рж╕рзНржХрзНржпрж╛ржм", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржЕрждрж┐рж░рж┐ржХрзНржд ржкрж╛ржирж┐рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЬржирзНржорж╛ржпрж╝ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЖржХрзНрж░рж╛ржирзНржд ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи, ржХржкрж╛рж░ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред ржирж┐рзЯржорж┐ржд ржЫрж╛ржБржЯрж╛ржЗ ржУ ржкрж╛ржирж┐ ржирж┐рж╖рзНржХрж╛рж╢ржирзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ ржирж┐ржиред"},
                 {"рж░рзЛржЧ": "ржЖржкрзЗрж▓ ржмрзНрж▓рзНржпрж╛ржХ рж░ржЯ", "ржХрзЗржи рж╣рзЯ": "ржкржЪрж╛ ржлрж▓ ржмрж╛ ржкрзБрж░ржирзЛ ржбрж╛рж▓рзЗ ржЫрждрзНрж░рж╛ржХ ржЬржирзНржо ржирж┐ржпрж╝рзЗ ржЫржбрж╝рж╛ржпрж╝ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржкржЪрж╛ ржлрж▓ ржУ ржбрж╛рж▓ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЧрж╛ржЫрзЗрж░ ржирж┐ржЪрзЗ ржкржбрж╝рзЗ ржерж╛ржХрж╛ ржлрж▓ ржирж┐рзЯржорж┐ржд ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржиред"},
                 {"рж░рзЛржЧ": "рж╕рж┐ржбрж╛рж░ ржЖржкрзЗрж▓ рж░рж╕рзНржЯ","ржХрзЗржи рж╣рзЯ": "ржЖржкрзЗрж▓ ржЧрж╛ржЫрзЗрж░ ржХрж╛ржЫрзЗ рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ ржерж╛ржХрж▓рзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ рж╕рж░рж╛ржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ ржирж╛ рж░рж╛ржЦрж▓рзЗ рж░рзЛржЧ рж╣ржмрзЗ ржирж╛ред"}, 
                 'ржЖржкрзЗрж▓___рж╕рзБрж╕рзНрже',
                 'ржмрзНрж▓рзБржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже', 
                 {"рж░рзЛржЧ": "ржЪрзЗрж░рж┐ ржкрж╛ржЙржбрж╛рж░рж┐ ржорж┐рж▓ржбрж┐ржЙ","ржХрзЗржи рж╣рзЯ": "рж╢рзБрж╖рзНржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛рзЯ ржкрж╛рждрж╛ржпрж╝ ржЫрждрзНрж░рж╛ржХрзЗрж░ рж╕рзНрждрж░ ржЬржорзЗред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж╕рж╛рж▓ржлрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржи, ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж░рж╛ржЦрзБржиред ржЧрж╛ржЫ ржЦрзБржм ржШржи ржирж╛ рж╣рж▓рзЗ рж░рзЛржЧ ржХржо рж╣ржпрж╝ред"},
                 'ржЪрзЗрж░рж┐ (ржЯржХрж╕рж╣)___рж╕рзБрж╕рзНрже', 
                 {"рж░рзЛржЧ": "ржнрзБржЯрзНржЯрж╛ рж╕рж╛рж░ржХрзЛрж╕ржкрзЛрж░рж╛ ржкрж╛рждрж╛ ржжрж╛ржЧ",  "ржХрзЗржи рж╣рзЯ": "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред рж╕ржарж┐ржХ ржкрж╛ржирж┐ рж╕рж░ржмрж░рж╛рж╣ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред"},
                 {"рж░рзЛржЧ": "ржнрзБржЯрзНржЯрж╛ ржХржоржи рж░рж╕рзНржЯ", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржУ ржарж╛ржгрзНржбрж╛ ржЖржмрж╣рж╛ржУржпрж╝рж╛рзЯ ржЫрждрзНрж░рж╛ржХрзЗрж░ ржмрзАржЬ ржЫржбрж╝рж╛ржпрж╝ред",  "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд рж▓рж╛ржЧрж╛ржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЬржорж┐рждрзЗ ржЖржЧрзЗрж░ рж░рзЛржЧржорзБржХрзНржд ржлрж╕рж▓ ржЪрж╛рж╖рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржкрж╛ржмрзЗред"}, 
                 {"рж░рзЛржЧ": "ржнрзБржЯрзНржЯрж╛ ржирж░рзНржжрж╛рж░рзНржи ржкрж╛рждрж╛ ржмрзНрж▓рж╛ржЗржЯ", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржжрзАрж░рзНржШ рж╕ржоржпрж╝ ржмрзГрж╖рзНржЯрж┐рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЖржХрзНрж░ржоржгред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЧрж╛ржЫрзЗрж░ ржШржирждрзНржм ржХржорж┐ржпрж╝рзЗ ржжрж┐ржи, рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"},
                 'ржнрзБржЯрзНржЯрж╛___рж╕рзБрж╕рзНрже',
                 {"рж░рзЛржЧ": "ржЖржЩрзНржЧрзБрж░ ржмрзНрж▓рзНржпрж╛ржХ рж░ржЯ",  "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржкржЪрж╛ ржлрж▓ ржерзЗржХрзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЖржХрзНрж░рж╛ржирзНржд ржлрж▓ ржУ ржбрж╛рж▓ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"}, 
                 {"рж░рзЛржЧ": "ржЖржЩрзНржЧрзБрж░ ржПрж╕ржХрж╛ (ржмрзНрж▓рзНржпрж╛ржХ ржорж┐ржЬрж▓рж╕)", "ржХрзЗржи рж╣рзЯ": "ржЕрждрж┐рж░рж┐ржХрзНржд ржЖрж░рзНржжрзНрж░рждрж╛ ржУ ржжрзАрж░рзНржШржХрж╛рж▓рзАржи ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЖржХрзНрж░рж╛ржирзНржд рж▓рждрж╛ рж╕рж░рж┐ржпрж╝рзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"}, 
                 {"рж░рзЛржЧ": "ржЖржЩрзНржЧрзБрж░ ржкрж╛рждрж╛ ржмрзНрж▓рж╛ржЗржЯ (ржЖржЗрж╕рж╛рж░рж┐ржУржкрж╕рж┐рж╕ ржкрж╛рждрж╛ ржжрж╛ржЧ)",  "ржХрзЗржи рж╣рзЯ": "ржмрзГрж╖рзНржЯрж┐ ржУ ржЖрж░рзНржжрзНрж░рждрж╛рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЧрж╛ржЫрзЗрж░ ржбрж╛рж▓ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"},
                 'ржЖржЩрзНржЧрзБрж░___рж╕рзБрж╕рзНрже',
                 {"рж░рзЛржЧ": "ржХржорж▓рж╛ рж╣рзБрзЯрж╛ржВрж▓ржВржмрж┐ржВ (рж╕рж╛ржЗржЯрзНрж░рж╛рж╕ ржЧрзНрж░рж┐ржирж┐ржВ)","ржХрзЗржи рж╣рзЯ": "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржжрзНржмрж╛рж░рж╛ ржнрж╛ржЗрж░рж╛рж╕ рж╕ржВржХрзНрж░ржоржгред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи, ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"}, 
                 {"рж░рзЛржЧ": "ржкрж┐ржЪ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "рждрж╛ржорж╛ ржнрж┐рждрзНрждрж┐ржХ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"},
                 'ржкрж┐ржЪ___рж╕рзБрж╕рзНрже', 
                 {"рж░рзЛржЧ": "ржмрзЗрж▓ ржорж░рж┐ржЪ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "ржХрзЗржи рж╣рзЯ": "рж╢рзАрждрж▓ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "ржмрзЗрж▓ ржорж░рж┐ржЪрзЗрж░ ржбрж╛рж▓ ржУ ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи, ржХржкрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"}, 
                 'ржмрзЗрж▓ ржорж░рж┐ржЪ___рж╕рзБрж╕рзНрже',
                 {"рж░рзЛржЧ": "ржЖрж▓рзБ ржЖрж░рзНрж▓рж┐ ржмрзНрж▓рж╛ржЗржЯ",  "ржХрзЗржи рж╣рзЯ": "рж╢рзАрждрж▓ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЕрж╕рзНрждрж┐рждрзНржмрж╢рзАрж▓ ржЖрж▓рзБ ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, рж╕ржарж┐ржХ рж╕рж╛рж░ ржУ ржкрж╛ржирж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"}, 
                 {"рж░рзЛржЧ": "ржЖрж▓рзБ рж▓рзЗржЯ ржмрзНрж▓рж╛ржЗржЯ",  "ржХрзЗржи рж╣рзЯ": "ржарж╛ржгрзНржбрж╛ ржУ ржЖрж░рзНржжрзНрж░ ржкрж░рж┐ржмрзЗрж╢рзЗ ржЫрждрзНрж░рж╛ржХрзЗрж░ ржмрзГржжрзНржзрж┐ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи ржПржмржВ ржЬржорж┐рждрзЗ ржЖржЧрзЗрж░ рж░рзЛржЧржорзБржХрзНржд ржлрж╕рж▓ ржЪрж╛рж╖ ржХрж░рзБржиред"},
                 'ржЖрж▓рзБ___рж╕рзБрж╕рзНрже', 
                 'рж░рж╛рж╕рзНржкржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже',
                 'рж╕ржпрж╝рж╛ржмрж┐ржи___рж╕рзБрж╕рзНрже', 
                 {"рж░рзЛржЧ": "рж╕рзНржХрзЛрзЯрж╛рж╢ ржкрж╛ржЙржбрж╛рж░рж┐ ржорж┐рж▓ржбрж┐ржЙ", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржХржо ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "рж╕рж╛рж▓ржлрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржи, ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж░рж╛ржЦрзБржиред"}, 
                 {"рж░рзЛржЧ": "рж╕рзНржЯрзНрж░ржмрзЗрж░рж┐ ржкрж╛рждрж╛рж░ рж╕рзНржХрж░рзНржЪ", "ржХрзЗржи рж╣рзЯ": "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"},
                 'рж╕рзНржЯрзНрж░ржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже',
                 {"рж░рзЛржЧ": "ржорж┐рж╖рзНржЯрж┐ ржЖрж▓рзБ рж╕рзБрж╕рзНрже"}, 
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "ржХрзЗржи рж╣рзЯ": "ржЕрждрж┐рж░рж┐ржХрзНржд ржЖрж░рзНржжрзНрж░рждрж╛ ржУ рж╕ржарж┐ржХ ржкрж░рж┐ржЪрж░рзНржпрж╛рж░ ржЕржнрж╛ржмред",  "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржХржкрж╛рж░ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"},    
                 {"рж░рзЛржЧ": "ржорж┐рж╖рзНржЯрж┐ ржЖрж▓рзБ рж╕рзБрж╕рзНрже"},
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ рж▓рзЗржЯ ржмрзНрж▓рж╛ржЗржЯ",  "ржХрзЗржи рж╣рзЯ": "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред",  "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"},
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ ржкрж╛рждрж╛рж░ ржЫрж╛ржБржЪ", "ржХрзЗржи рж╣рзЯ": "ржарж╛ржгрзНржбрж╛ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред",  "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЖржХрзНрж░рж╛ржирзНржд ржЕржВрж╢ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржкрзНрж░рзЯрзЛржЧ ржХрж░рзБржиред"}, 
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ рж╕рзЗржкрзНржЯрзЛрж░рж┐ржпрж╝рж╛ ржжрж╛ржЧ", "ржХрзЗржи рж╣рзЯ": "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрзНрж░рждрж┐ржХрж╛рж░":  "ржЖржХрзНрж░рж╛ржирзНржд ржЕржВрж╢ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи, ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"},
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ рж╕рзНржкрж╛ржЗржбрж╛рж░ ржорж╛ржЗржЯ",  "ржХрзЗржи рж╣рзЯ": "ржЧрж░ржо ржУ рж╢рзБржХржирзЛ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржирж┐ржо рждрзЗрж▓ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи ржПржмржВ ржкрзЛржХрж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржиред"}, 
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ ржЯрж╛рж░рзНржЧрзЗржЯ рж╕рзНржкржЯ", "ржХрзЗржи рж╣рзЯ": "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред",  "ржкрзНрж░рждрж┐ржХрж╛рж░": "ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржПржмржВ рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"},
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ ржЗржпрж╝рзЗрж▓рзЛ рж▓рж┐ржл ржХрж╛рж░рзНрж▓ ржнрж╛ржЗрж░рж╛рж╕", "ржХрзЗржи рж╣рзЯ": "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржжрзНржмрж╛рж░рж╛ ржнрж╛ржЗрж░рж╛рж╕ ржЫржбрж╝рж╛ржпрж╝ред","ржкрзНрж░рждрж┐ржХрж╛рж░": "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи, ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"},
                 {"рж░рзЛржЧ": "ржЯржорзЗржЯрзЛ ржорзЛржЬрж╛ржЗржХ ржнрж╛ржЗрж░рж╛рж╕", "ржХрзЗржи рж╣рзЯ": "ржнрж╛ржЗрж░рж╛рж╕ ржжрзНржмрж╛рж░рж╛ рж╕ржВржХрзНрж░ржоржгред", "ржкрзНрж░рждрж┐ржХрж╛рж░": "рж░рзЛржЧржорзБржХрзНржд ржмрзАржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, ржЧрж╛ржЫ ржУ ржкрзЛржХрж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржиред"},
                 'ржЯржорзЗржЯрзЛ___рж╕рзБрж╕рзНрже']

            prediction = class_name[result_index]
            st.success(f"Model predicts: {prediction['рж░рзЛржЧ']}")
            st.info(f"ржХрзЗржи рж╣рзЯ: {prediction['ржХрзЗржи рж╣рзЯ']}")
            st.warning(f"ржкрзНрж░рждрж┐ржХрж╛рж░: {prediction['ржкрзНрж░рждрж┐ржХрж╛рж░']}")

            log_image_input(st.session_state.user_mobile, image_path, prediction)

# Register page
elif app_mode == "Register":
    with placeholder.form("register"):
        st.markdown("#### Register a new account")
        first_name = st.text_input("First Name")
        last_name = st.text_input("Last Name")
        mobile_number = st.text_input("Mobile Number", max_chars=11)
        password = st.text_input("Password", type="password")
        confirm_password = st.text_input("Confirm Password", type="password")
        submit = st.form_submit_button("Register")
    if submit:
        if len(mobile_number) != 11:
            st.error("Enter a valid 11-digit mobile number.")
        elif mobile_number in user_data:
            st.error("Mobile number already registered.")
        elif password != confirm_password:
            st.error("Passwords do not match.")
        else:
            user_data[mobile_number] = {"first_name": first_name, "last_name": last_name, "password": password}
            save_user_data(user_data)
            st.success("Registration successful! Please login.")

# Login page
elif app_mode == "Login":
    with placeholder.form("login"):
        st.markdown("#### Enter your credentials")
        login_mobile_number = st.text_input("Mobile Number", max_chars=11)
        login_password = st.text_input("Password", type="password")
        login_submit = st.form_submit_button("Login")
    if login_submit:
        if login_mobile_number in user_data and user_data[login_mobile_number]["password"] == login_password:
            st.session_state.logged_in = True
            st.session_state.user_mobile = login_mobile_number
            st.success("Login successful!")
        else:
            st.error("Invalid mobile number or password.")

# Admin Dashboard
elif app_mode == "Admin Dashboard":
    if not st.session_state.is_admin:
        admin_username = st.text_input("Admin Username")
        admin_password = st.text_input("Admin Password", type="password")
        submit_admin = st.button("Login as Admin")
        if submit_admin:
            if ADMIN_CREDENTIALS.get(admin_username) == admin_password:
                st.session_state.is_admin = True
                st.success("Admin login successful!")
            else:
                st.error("Invalid admin credentials.")
    else:
        st.header("Admin Dashboard")
        if st.button("Admin Logout"):
            st.session_state.is_admin = False
            st.success("Admin logged out successfully.")
            app_mode = "Home"
        if st.button("View Model Output (User Predictions)"):
            st.subheader("User Predictions and Image Uploads")
            if os.path.exists('user_inputs.json'):
                with open('user_inputs.json', 'r') as f:
                    user_inputs = json.load(f)
                if user_inputs:
                    for entry in user_inputs:
                        st.write(f"User {entry['mobile_number']} uploaded image {entry['image_path']} at {entry['timestamp']}. Prediction: {entry['prediction']}")
                        if os.path.exists(entry['image_path']):
                            st.image(entry['image_path'], caption=f"Uploaded Image by {entry['mobile_number']}", use_container_width=True)
                        else:
                            st.warning(f"Image not found at path: {entry['image_path']}")
                else:
                    st.warning("No predictions available.")
            else:
                st.warning("No user input logs found.")
        st.subheader("User Information")
        for mobile, details in user_data.items():
            st.write(f"Mobile: {mobile}, Name: {details['first_name']} {details['last_name']}")

# About Page
elif app_mode == "About":
    st.header("About Us")
    st.markdown("""
    This Plant Disease Recognition System was built to help identify plant diseases from leaf images using AI.

    **Mission**: Assist farmers and agriculturists in protecting crops with fast, accurate diagnosis.

    **Team**: Developed by a group of dedicated software developers and AI enthusiasts passionate about agriculture.
    """)
