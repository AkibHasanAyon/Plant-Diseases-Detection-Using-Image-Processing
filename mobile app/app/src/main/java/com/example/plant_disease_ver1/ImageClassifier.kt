package com.example.plant_disease_ver1

import android.content.Context
import android.graphics.Bitmap
import android.util.Log
import org.tensorflow.lite.Interpreter
import java.io.FileInputStream
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.MappedByteBuffer
import java.nio.channels.FileChannel

class ImageClassifier(context: Context) {
    private var interpreter: Interpreter? = null
    private val inputSize = 128
    private val modelFileName = "plant_disease_model.tflite"

    // Labels formatted as an array of three strings for each disease: [disease_name, cause, treatment]
    private val labels = arrayOf(
        arrayOf("ржЖржкрзЗрж▓ рж╕рзНржХрзНржпрж╛ржм", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржЕрждрж┐рж░рж┐ржХрзНржд ржкрж╛ржирж┐рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЬржирзНржорж╛ржпрж╝ред", "ржЖржХрзНрж░рж╛ржирзНржд ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржХржкрж╛рж░ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред ржирж┐рзЯржорж┐ржд ржЫрж╛ржБржЯрж╛ржЗ ржУ ржкрж╛ржирж┐ ржирж┐рж╖рзНржХрж╛рж╢ржирзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ ржирж┐ржиред"),
        arrayOf("ржЖржкрзЗрж▓ ржмрзНрж▓рзНржпрж╛ржХ рж░ржЯ", "ржкржЪрж╛ ржлрж▓ ржмрж╛ ржкрзБрж░ржирзЛ ржбрж╛рж▓рзЗ ржЫрждрзНрж░рж╛ржХ ржЬржирзНржо ржирж┐ржпрж╝рзЗ ржЫржбрж╝рж╛ржпрж╝ред", "ржкржЪрж╛ ржлрж▓ ржУ ржбрж╛рж▓ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЧрж╛ржЫрзЗрж░ ржирж┐ржЪрзЗ ржкржбрж╝рзЗ ржерж╛ржХрж╛ ржлрж▓ ржирж┐рзЯржорж┐ржд ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рзБржиред"),
        arrayOf("рж╕рж┐ржбрж╛рж░ ржЖржкрзЗрж▓ рж░рж╕рзНржЯ", "ржЖржкрзЗрж▓ ржЧрж╛ржЫрзЗрж░ ржХрж╛ржЫрзЗ рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ ржерж╛ржХрж▓рзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред", "рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ рж╕рж░рж╛ржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржХрж╛ржЫрж╛ржХрж╛ржЫрж┐ рж╕рж┐ржбрж╛рж░ ржЧрж╛ржЫ ржирж╛ рж░рж╛ржЦрж▓рзЗ рж░рзЛржЧ рж╣ржмрзЗ ржирж╛ред"),
        arrayOf("ржЖржкрзЗрж▓___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржПржмржВ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржмрзНрж▓рзБржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржПржмржВ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржЪрзЗрж░рж┐ ржкрж╛ржЙржбрж╛рж░рж┐ ржорж┐рж▓ржбрж┐ржЙ", "рж╢рзБрж╖рзНржХ ржЖржмрж╣рж╛ржУржпрж╝рж╛рзЯ ржкрж╛рждрж╛ржпрж╝ ржЫрждрзНрж░рж╛ржХрзЗрж░ рж╕рзНрждрж░ ржЬржорзЗред", "рж╕рж╛рж▓ржлрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржи ржПржмржВ ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж░рж╛ржЦрзБржиред ржЧрж╛ржЫ ржЦрзБржм ржШржи ржирж╛ рж╣рж▓рзЗ рж░рзЛржЧ ржХржо рж╣ржпрж╝ред"),
        arrayOf("ржЪрзЗрж░рж┐ (ржЯржХрж╕рж╣)___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржПржмржВ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржнрзБржЯрзНржЯрж╛ рж╕рж╛рж░ржХрзЛрж╕ржкрзЛрж░рж╛ ржкрж╛рждрж╛ ржжрж╛ржЧ", "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред рж╕ржарж┐ржХ ржкрж╛ржирж┐ рж╕рж░ржмрж░рж╛рж╣ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржиред"),
        arrayOf("ржнрзБржЯрзНржЯрж╛ ржХржоржи рж░рж╕рзНржЯ", "ржЖрж░рзНржжрзНрж░ ржУ ржарж╛ржгрзНржбрж╛ ржЖржмрж╣рж╛ржУрзЯрж╛рзЯ ржЫрждрзНрж░рж╛ржХрзЗрж░ ржмрзАржЬ ржЫржбрж╝рж╛ржпрж╝ред", "рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд рж▓рж╛ржЧрж╛ржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЬржорж┐рждрзЗ ржЖржЧрзЗрж░ рж░рзЛржЧржорзБржХрзНржд ржлрж╕рж▓ ржЪрж╛рж╖рзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржкрж╛ржмрзЗред"),
        arrayOf("ржнрзБржЯрзНржЯрж╛ ржирж░рзНржжрж╛рж░рзНржи ржкрж╛рждрж╛ ржмрзНрж▓рж╛ржЗржЯ", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржжрзАрж░рзНржШ рж╕ржоржпрж╝ ржмрзГрж╖рзНржЯрж┐рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЖржХрзНрж░ржоржгред", "ржЧрж╛ржЫрзЗрж░ ржШржирждрзНржм ржХржорж┐ржпрж╝рзЗ ржжрж┐ржи ржПржмржВ рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржнрзБржЯрзНржЯрж╛___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржПржмржВ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржЖржЩрзНржЧрзБрж░ ржмрзНрж▓рзНржпрж╛ржХ рж░ржЯ", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржкржЪрж╛ ржлрж▓ ржерзЗржХрзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред", "ржЖржХрзНрж░рж╛ржирзНржд ржлрж▓ ржУ ржбрж╛рж▓ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржЖржЩрзНржЧрзБрж░ ржПрж╕ржХрж╛ (ржмрзНрж▓рзНржпрж╛ржХ ржорж┐ржЬрж▓рж╕)", "ржЕрждрж┐рж░рж┐ржХрзНржд ржЖрж░рзНржжрзНрж░рждрж╛ ржУ ржжрзАрж░рзНржШржХрж╛рж▓рзАржи ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ред", "ржЖржХрзНрж░рж╛ржирзНржд рж▓рждрж╛ рж╕рж░рж┐ржпрж╝рзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"),
        arrayOf("ржЖржЩрзНржЧрзБрж░ ржкрж╛рждрж╛ ржмрзНрж▓рж╛ржЗржЯ (ржЖржЗрж╕рж╛рж░рж┐ржУржкрж╕рж┐рж╕ ржкрж╛рждрж╛ ржжрж╛ржЧ)", "ржмрзГрж╖рзНржЯрж┐ ржУ ржЖрж░рзНржжрзНрж░рждрж╛рж░ ржХрж╛рж░ржгрзЗ ржЫрждрзНрж░рж╛ржХ ржЫржбрж╝рж╛ржпрж╝ред", "ржЧрж╛ржЫрзЗрж░ ржбрж╛рж▓ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"),
        arrayOf("ржЖржЩрзНржЧрзБрж░___рж╕рзБрж╕рзНрже --- (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржХржорж▓рж╛ рж╣рзБрзЯрж╛ржВрж▓ржВржмрж┐ржВ (рж╕рж╛ржЗржЯрзНрж░рж╛рж╕ ржЧрзНрж░рж┐ржирж┐ржВ)", "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржжрзНржмрж╛рж░рж╛ ржнрж╛ржЗрж░рж╛рж╕ рж╕ржВржХрзНрж░ржоржгред", "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи ржПржмржВ ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"),
        arrayOf("ржкрж┐ржЪ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржЙржЪрзНржЪ рждрж╛ржкржорж╛рждрзНрж░рж╛ред", "рждрж╛ржорж╛ ржнрж┐рждрзНрждрж┐ржХ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"),
        arrayOf("ржкрж┐ржЪ___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржПржмржВ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржмрзЗрж▓ ржорж░рж┐ржЪ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "рж╢рзАрждрж▓ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржмрзЗрж▓ ржорж░рж┐ржЪрзЗрж░ ржбрж╛рж▓ ржУ ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржХржкрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржмрзЗрж▓ ржорж░рж┐ржЪ___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржЖрж▓рзБ ржЖрж░рзНрж▓рж┐ ржмрзНрж▓рж╛ржЗржЯ", "рж╢рзАрждрж▓ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржЕрж╕рзНрждрж┐рждрзНржмрж╢рзАрж▓ ржЖрж▓рзБ ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж╕ржарж┐ржХ рж╕рж╛рж░ ржУ ржкрж╛ржирж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржЖрж▓рзБ рж▓рзЗржЯ ржмрзНрж▓рж╛ржЗржЯ", "ржарж╛ржгрзНржбрж╛ ржУ ржЖрж░рзНржжрзНрж░ ржкрж░рж┐ржмрзЗрж╢рзЗ ржЫрждрзНрж░рж╛ржХрзЗрж░ ржмрзГржжрзНржзрж┐ред", "ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи ржПржмржВ ржЬржорж┐рждрзЗ ржЖржЧрзЗрж░ рж░рзЛржЧржорзБржХрзНржд ржлрж╕рж▓ ржЪрж╛рж╖ ржХрж░рзБржиред"),
        arrayOf("ржЖрж▓рзБ___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("рж░рж╛рж╕рзНржкржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("рж╕ржпрж╝рж╛ржмрж┐ржи___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("рж╕рзНржХрзЛрзЯрж╛рж╢ ржкрж╛ржЙржбрж╛рж░рж┐ ржорж┐рж▓ржбрж┐ржЙ", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржУ ржХржо ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓ред", "рж╕рж╛рж▓ржлрж╛рж░ рж╕рзНржкрзНрж░рзЗ ржжрж┐ржи ржмрж╛рждрж╛рж╕ ржЪрж▓рж╛ржЪрж▓рзЗрж░ ржмрзНржпржмрж╕рзНржерж╛ рж░рж╛ржЦрзБржиред"),
        arrayOf("рж╕рзНржЯрзНрж░ржмрзЗрж░рж┐ ржкрж╛рждрж╛рж░ рж╕рзНржХрж░рзНржЪ", "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржкрж╛рждрж╛ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"),
        arrayOf("рж╕рзНржЯрзНрж░ржмрзЗрж░рж┐___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржорж┐рж╖рзНржЯрж┐ ржЖрж▓рзБ рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "---", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржЯржорзЗржЯрзЛ ржмрзНржпрж╛ржХржЯрзЗрж░рж┐ржпрж╝рж╛рж▓ рж╕рзНржкржЯ", "ржЕрждрж┐рж░рж┐ржХрзНржд ржЖрж░рзНржжрзНрж░рждрж╛ ржУ рж╕ржарж┐ржХ ржкрж░рж┐ржЪрж░рзНржпрж╛рж░ ржЕржнрж╛ржмред", "ржХржкрж╛рж░ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"),
        arrayOf("ржорж┐рж╖рзНржЯрж┐ ржЖрж▓рзБ рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "---", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред"),
        arrayOf("ржЯржорзЗржЯрзЛ рж▓рзЗржЯ ржмрзНрж▓рж╛ржЗржЯ", "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ ржкрж╛рждрж╛рж░ ржЫрж╛ржБржЪ", "ржарж╛ржгрзНржбрж╛ ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржЖржХрзНрж░рж╛ржирзНржд ржЕржВрж╢ ржЫрзЗржБржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржкрзНрж░рзЯрзЛржЧ ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ рж╕рзЗржкрзНржЯрзЛрж░рж┐ржпрж╝рж╛ ржжрж╛ржЧ", "ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржЖржХрзНрж░рж╛ржирзНржд ржЕржВрж╢ ржХрзЗржЯрзЗ ржлрзЗрж▓рзБржи ржПржмржВ ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ рж╕рзНржкрж╛ржЗржбрж╛рж░ ржорж╛ржЗржЯ", "ржЧрж░ржо ржУ рж╢рзБржХржирзЛ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржирж┐ржо рждрзЗрж▓ рж╕рзНржкрзНрж░рзЗ ржХрж░рзБржи ржПржмржВ ржкрзЛржХрж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ ржЯрж╛рж░рзНржЧрзЗржЯ рж╕рзНржкржЯ", "ржЧрж░ржо ржУ ржЖрж░рзНржжрзНрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ред", "ржЫрждрзНрж░рж╛ржХржирж╛рж╢ржХ рж╕рзНржкрзНрж░рзЗ ржПржмржВ рж░рзЛржЧржорзБржХрзНржд ржЬрж╛ржд ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ ржЗржпрж╝рзЗрж▓рзЛ рж▓рж┐ржл ржХрж╛рж░рзНрж▓ ржнрж╛ржЗрж░рж╛рж╕", "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржжрзНржмрж╛рж░рж╛ ржнрж╛ржЗрж░рж╛рж╕ ржЫржбрж╝рж╛ржпрж╝ред", "рж╕рж╛ржжрж╛ ржорж╛ржЫрж┐ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржи ржПржмржВ ржЖржХрзНрж░рж╛ржирзНржд ржЧрж╛ржЫ рж╕рж░рж╛ржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ ржорзЛржЬрж╛ржЗржХ ржнрж╛ржЗрж░рж╛рж╕", "ржнрж╛ржЗрж░рж╛рж╕ ржжрзНржмрж╛рж░рж╛ рж╕ржВржХрзНрж░ржоржгред", "рж░рзЛржЧржорзБржХрзНржд ржмрзАржЬ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ ржЧрж╛ржЫ ржУ ржкрзЛржХрж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзБржиред"),
        arrayOf("ржЯржорзЗржЯрзЛ___рж╕рзБрж╕рзНрже (ржЧрж╛ржЫржЯрж┐ рж╕рзБрж╕рзНрже! ЁЯМ▒)", "", "ржЧрж╛ржЫржХрзЗ рж╕рзБрж╕рзНрже рж░рж╛ржЦрждрзЗ ржирж┐ржпрж╝ржорж┐ржд ржкрж╛ржирж┐ ржЖрж▓рзЛ ржУ рж╕рж╛рж░ ржжрзЗржУржпрж╝рж╛ ржЙржЪрж┐рждред")
    )


    init {
        interpreter = Interpreter(loadModelFile(context))
        Log.d("ImageClassifier", "Interpreter initialized successfully.")
    }

    // Load the TFLite model from the assets folder.
    private fun loadModelFile(context: Context): MappedByteBuffer {
        Log.d("ImageClassifier", "Loading model file: $modelFileName")
        val fileDescriptor = context.assets.openFd(modelFileName)
        val inputStream = FileInputStream(fileDescriptor.fileDescriptor)
        val fileChannel = inputStream.channel
        val startOffset = fileDescriptor.startOffset
        val declaredLength = fileDescriptor.declaredLength
        return fileChannel.map(FileChannel.MapMode.READ_ONLY, startOffset, declaredLength)
    }

    // Preprocess the bitmap, run inference, and return the predicted label.
    fun classify(bitmap: Bitmap): String {
        // Resize the image to match the model's expected input size.
        val resizedBitmap = Bitmap.createScaledBitmap(bitmap, inputSize, inputSize, true)
        Log.d("ImageClassifier", "Resized bitmap to $inputSize x $inputSize")
        val inputBuffer = convertBitmapToByteBuffer(resizedBitmap)
        Log.d("ImageClassifier", "ByteBuffer capacity: ${inputBuffer.capacity()}")

        // Create an output buffer with shape [1, 38]
        val outputBuffer = Array(1) { FloatArray(labels.size) }
        interpreter?.run(inputBuffer, outputBuffer)

        val probabilities = outputBuffer[0]
        Log.d("ImageClassifier", "Probabilities: " + probabilities.joinToString(separator = ", "))

        var maxIndex = 0
        var maxProb = probabilities[0]
        for (i in probabilities.indices) {
            if (probabilities[i] > maxProb) {
                maxProb = probabilities[i]
                maxIndex = i
            }
        }

        // Get the label corresponding to the highest probability
        val diseaseName = labels[maxIndex][0]
        val cause = labels[maxIndex][1]
        val treatment = labels[maxIndex][2]

        Log.d("ImageClassifier", "Predicted: $diseaseName (probability: $maxProb)")

        // Format the result as per the required output
        return "рж░рзЛржЧ: $diseaseName\n\nржХрзЗржи рж╣рзЯ: $cause\n\nржкрзНрж░рждрж┐ржХрж╛рж░: $treatment"
    }

    // Convert the bitmap to a ByteBuffer without additional normalization,
    // since your training data used raw pixel values (0тАУ255).
    private fun convertBitmapToByteBuffer(bitmap: Bitmap): ByteBuffer {
        val byteBuffer = ByteBuffer.allocateDirect(4 * inputSize * inputSize * 3)
        byteBuffer.order(ByteOrder.nativeOrder())
        val intValues = IntArray(inputSize * inputSize)
        bitmap.getPixels(intValues, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)

        // Optional: log raw pixel values of the first pixel.
        if (intValues.isNotEmpty()) {
            val firstPixel = intValues[0]
            val firstR = (firstPixel shr 16) and 0xFF
            val firstG = (firstPixel shr 8) and 0xFF
            val firstB = (firstPixel and 0xFF)
            Log.d("Preprocessing", "First raw pixel: R=$firstR, G=$firstG, B=$firstB")
        }

        // Write pixel values to the buffer as float values (range remains 0тАУ255).
        for (pixel in intValues) {
            val r = ((pixel shr 16) and 0xFF).toFloat()
            val g = ((pixel shr 8) and 0xFF).toFloat()
            val b = (pixel and 0xFF).toFloat()
            byteBuffer.putFloat(r)
            byteBuffer.putFloat(g)
            byteBuffer.putFloat(b)
        }
        return byteBuffer
    }
}
